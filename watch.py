import requests
import time
import json
from bs4 import BeautifulSoup

# üîó –í–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º
QUESTION_URLS = [
    "https://otvet.mail.ru/question/235202555",
    "https://otvet.mail.ru/question/239495038",
    "https://otvet.mail.ru/question/242195187",
    "https://otvet.mail.ru/question/242225874"
]

# ‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî 10 –º–∏–Ω—É—Ç (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
CHECK_INTERVAL = 600

# üßæ Telegram-–±–æ—Ç
BOT_TOKEN = "8001144863:AAGNrfE6r95DlfvSUgHFsiqlVyZUVFRcRO8"  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π
CHAT_ID = "2032893325"  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π

HEADERS = {
    "User-Agent": "Mozilla/5.0 (Linux; Android 11; Mobile) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Mobile Safari/537.36",
    "Cache-Control": "no-cache"
}

def send_to_telegram(message):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    try:
        requests.post(url, data=payload, timeout=10)
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram: {e}")

def get_answer_count(url):
    try:
        response = requests.get(url, headers=HEADERS, timeout=10)
        soup = BeautifulSoup(response.text, "html.parser")

        script_tags = soup.find_all("script", {"type": "application/ld+json"})
        for tag in script_tags:
            try:
                data = json.loads(tag.string)
                if "@graph" in data:
                    for obj in data["@graph"]:
                        if obj.get("@type") == "QAPage":
                            count = obj["mainEntity"].get("answerCount")
                            if count is not None:
                                return int(count)
            except Exception:
                continue
        return -1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {url}: {e}")
        return -1

def send_notification(url, count):
    message = f"üÜï <b>–û—Ç–≤–µ—Ç–æ–≤ —Å—Ç–∞–ª–æ: {count}</b>\n<a href=\"{url}\">–û—Ç–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å</a>"
    send_to_telegram(message)

def main():
    print("üì° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –°–ª–µ–¥–∏–º –∑–∞ –≤–æ–ø—Ä–æ—Å–∞–º–∏...")
    answer_counts = {}

    for url in QUESTION_URLS:
        count = get_answer_count(url)
        if count == -1:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã: {url}")
        else:
            print(f"‚úÖ {url} ‚Äî —Å—Ç–∞—Ä—Ç: {count} –æ—Ç–≤–µ—Ç(–æ–≤)")
            answer_counts[url] = count

    while True:
        time.sleep(CHECK_INTERVAL)
        for url in QUESTION_URLS:
            new_count = get_answer_count(url)
            if new_count == -1:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {url}")
                continue

            old_count = answer_counts.get(url, -1)
            if new_count != old_count:
                print(f"üì¢ {url}\n–û—Ç–≤–µ—Ç–æ–≤: {old_count} ‚Üí {new_count}")
                send_notification(url, new_count)
                answer_counts[url] = new_count
            else:
                print(f"‚è±Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ({new_count}) ‚Äî {url}")

if __name__ == "__main__":
    main()
